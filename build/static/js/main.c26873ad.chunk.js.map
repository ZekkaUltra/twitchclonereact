{"version":3,"sources":["components/Header/IconeTwitch.svg","components/Header/Search.svg","components/Header/MenuIco.svg","components/Header/Croix.svg","components/Header/Header.js","api.js","components/Sidebar/Sidebar.js","components/Games/Games.js","components/TopStreams/TopStreams.js","components/Live/Live.js","components/GameStreams/GameStreams.js","components/Erreur/Erreur.js","components/Resultats/Resultats.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","useState","menu","showMenu","smallScreen","setSmallScreen","searchInput","setSearch","useEffect","mediaQuery","window","matchMedia","addListener","handleMediaQueryChange","removeListener","matches","hideMenu","className","onClick","to","src","logo","alt","onSubmit","e","preventDefault","required","value","onChange","target","handleKeyPress","type","pathname","search","croix","menuIco","api","axios","create","headers","Sidebar","topStreams","setTopStreams","a","get","result","dataArray","data","gameIDs","map","stream","game_id","userIDs","user_id","queryParamsGame","queryParamsUsers","id","urlFinalGames","urlFinalUsers","gamesNames","getUsers","gamesNameArray","arrayUsers","finalArray","gameName","truePic","login","forEach","name","user","profile_image_url","slice","fetchData","console","log","index","key","user_name","viewer_count","Games","games","setGames","game","newUrl","box_art_url","replace","state","gameID","TopStreams","channels","setChannels","thumbnail_url","channel","Live","slug","useParams","infoStream","setInfoStream","infoGame","setInfoGame","length","gameid","resultNomGame","nomJeu","height","width","title","language","GameStreams","location","useLocation","streamData","setStreamData","viewers","setViewers","newURL","totalViewers","reduce","acc","val","finalUrl","getUsersLogin","userLoginArray","Erreur","Resultats","setResult","streamerInfo","setStreamerInfo","cleanSearch","display_name","description","App","forceRefresh","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c26873ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/IconeTwitch.bea3cace.svg\";","module.exports = __webpack_public_path__ + \"static/media/Search.862e4fe3.svg\";","module.exports = __webpack_public_path__ + \"static/media/MenuIco.29c57c4d.svg\";","module.exports = __webpack_public_path__ + \"static/media/Croix.a55a5aa3.svg\";","import React, {useState, useEffect} from 'react';\nimport logo from './IconeTwitch.svg'\nimport search from './Search.svg'\nimport menuIco from './MenuIco.svg'\nimport croix from './Croix.svg'\nimport {Link} from 'react-router-dom';\n\nfunction Header(){\n\n    const [menu, showMenu] = useState(false);\n    const [smallScreen, setSmallScreen] = useState(false);\n    const [searchInput, setSearch] = useState('');\n\n    useEffect(() => {\n\n\n        const mediaQuery = window.matchMedia(\"(max-width: 900px)\");\n        // addlistener c'est comme addeventlisterner pour les medias queries en JS\n        mediaQuery.addListener(handleMediaQueryChange);\n        handleMediaQueryChange(mediaQuery);\n\n        return () => {\n            mediaQuery.removeListener(handleMediaQueryChange);\n        }\n\n    })\n\n    const handleMediaQueryChange = mediaQuery => {\n        if(mediaQuery.matches) {\n            setSmallScreen(true);\n        } else {\n            setSmallScreen(false);\n        }\n    }\n\n    const toggleNavRes = () => {\n        showMenu(!menu);\n    }\n\n    const hideMenu = () => {\n\n        if(menu === true) {\n            showMenu(!menu);\n        }\n\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n    }\n\n    const handleKeyPress = (e) => {\n        setSearch(e.target.value);\n    }\n\n\n    return (\n        <div>\n\n            <nav className=\"headerTop\">\n                {(menu || !smallScreen) && (\n\n          \n                <ul className=\"listeMenu\">\n\n                    <li onClick={hideMenu} className=\"liensNav\">\n                        <Link className=\"lien\" to=\"/\">\n                          <img src={logo} alt=\"logo twitch\" className=\"logo\"/>\n                        </Link>\n                    </li>\n                    <li onClick={hideMenu} className=\"liensNav\">\n                        <Link className=\"lien\" to=\"/\">\n                          Top Games\n                        </Link>\n                    </li>\n                    <li onClick={hideMenu} className=\"liensNav\">\n                         <Link className=\"lien\" to=\"/top-streams\">\n                             Top Streams\n                         </Link>\n                    </li>\n                    <li className=\"liensNav\">\n                        <form className=\"formSubmit\" onSubmit={handleSubmit}>\n\n                            <input required value={searchInput} onChange={(e) => handleKeyPress(e)} type=\"text\" className=\"inputRecherche\"/>\n\n                        <Link\n                        className=\"lien\"\n                        to={{\n                            pathname: `/resultats/${searchInput}`\n                        }}\n                        >\n                            <button type=\"submit\">\n                                <img src={search} alt=\"icone loupe\" className=\"logoLoupe\"/>\n                            </button>\n                        </Link>\n                        </form>\n                    </li>\n\n                </ul>\n\n            )}\n\n            </nav>\n\n        <div className=\"menuResBtn\">\n            <img onClick={toggleNavRes} src={!menu ? menuIco : croix} alt=\"icone menu responsive\" className=\"menuIco\"/>\n        </div>\n\n        </div>\n    )\n}\n\nexport default Header","import axios from 'axios';\n\nlet api = axios.create({\n    headers: {\n        \"Client-ID\": \"w2a6cwsv20row1slmr7kslio7oxg1i\",\n        \"Authorization\": \"Bearer venc4u8ggf51422czvk8sq43d5m9jq\"\n        }\n})\n\n/*\n    CLIENT_ID = 'w2a6cwsv20row1slmr7kslio7oxg1i';\n    REDIRECT = 'https://127.0.0.1/';\n\n    LIEN AUTH = https://id.twitch.tv/oauth2/authorize?client_id={CLIENT_ID}&redirect_uri={REDIRECT}/&response_type=token\n\n    LIEN REMPLI = https://id.twitch.tv/oauth2/authorize?client_id=w2a6cwsv20row1slmr7kslio7oxg1i&redirect_uri=https://127.0.0.1/&response_type=token\n*/\n\nexport default api;\n","import React, {useEffect, useState} from 'react';\nimport api from '../../api';\nimport {Link} from 'react-router-dom';\n\n\nfunction Sidebar(){\n\n\n    const [topStreams, setTopStreams] = useState([]);\n\n    useEffect(() => {\n\n        const fetchData = async () => {\n\n            const result = await api.get(\"https://api.twitch.tv/helix/streams\");\n\n            let dataArray = result.data.data;\n            // console.log(dataArray);\n            \n            let gameIDs = dataArray.map(stream => {\n                return stream.game_id;\n            })\n            let userIDs = dataArray.map(stream => {\n                return stream.user_id;\n            })\n            // console.log(gameIDs, userIDs);\n            \n            // Création des URLs personnalisés\n\n            let baseUrlGames = \"https://api.twitch.tv/helix/games?\";\n            let baseUrlUsers = \"https://api.twitch.tv/helix/users?\";\n\n            let queryParamsGame = \"\";\n            let queryParamsUsers = \"\";\n\n            gameIDs.map(id => {\n                return (queryParamsGame = queryParamsGame + `id=${id}&`)\n            })\n            userIDs.map(id => {\n                return (queryParamsUsers = queryParamsUsers + `id=${id}&`)\n            })\n\n            // url final\n            let urlFinalGames = baseUrlGames + queryParamsGame;\n            let urlFinalUsers = baseUrlUsers + queryParamsUsers;\n            // console.log(urlFinalGames);\n\n            // appel\n            let gamesNames = await api.get(urlFinalGames);\n            let getUsers = await api.get(urlFinalUsers);\n\n            let gamesNameArray = gamesNames.data.data;\n            let arrayUsers = getUsers.data.data;\n            // console.log(arrayUsers, gamesNameArray);\n\n\n            // création du tableau final\n            let finalArray = dataArray.map(stream => {\n\n                stream.gameName = \"\";\n                stream.truePic = \"\";\n                stream.login = \"\";\n\n                gamesNameArray.forEach(name => {\n                    arrayUsers.forEach(user => {\n                        if(stream.user_id === user.id && stream.game_id === name.id) {\n                            \n                            stream.truePic = user.profile_image_url;\n                            stream.gameName = name.name;\n                            stream.login = user.login;\n                        }\n                    })\n                })\n\n                return stream;\n            })\n            \n            setTopStreams(finalArray.slice(0,6));\n        }\n\n        fetchData();\n\n    }, [])\n\nconsole.log(topStreams);\n\n\n    return (\n        <div className=\"sidebar\">\n            <h2 className=\"titreSidebar\">Chaînes recommandées</h2>\n            <ul className=\"listeStream\">\n                \n                {topStreams.map((stream,index) => (\n\n                    <Link \n                    key={index}\n                    className=\"lien\"\n                    to={{\n                        pathname: `/live/${stream.login}`\n                    }}\n                    >\n                    <li key={index} className=\"containerFlexSidebar\">\n\n                        <img src={stream.truePic} alt=\"logo user\" className=\"profilePicRonde\"/>\n\n                        <div className=\"streamUser\">{stream.user_name}</div>\n\n                        <div className=\"viewerRight\">\n\n                        <div className=\"pointRouge\"></div>\n                        <div>{stream.viewer_count}</div>\n\n                        </div>\n\n                        <div className=\"gameNameSidebar\">{stream.gameName}</div>\n\n\n                    </li>\n                    </Link>\n                    \n                ))}\n\n            </ul>\n        </div>\n    )\n}\n\nexport default Sidebar;","import React, {useState, useEffect} from 'react';\nimport api from '../../api';\nimport {Link} from 'react-router-dom';\n\nfunction Games(){\n\n    const [games,setGames] = useState([])\n\n    useEffect(() => {\n\n        const fetchData = async () => {\n\n            const result = await api.get('https://api.twitch.tv/helix/games/top')\n            // console.log(result);\n            \n            let dataArray = result.data.data;\n            let finalArray = dataArray.map(game => {\n                let newUrl = game.box_art_url\n                .replace(\"{width}\", \"250\")\n                .replace(\"{height}\", \"300\");\n            game.box_art_url = newUrl;\n            return game;\n            });\n\n            setGames(finalArray);\n        }\n\n        fetchData();\n\n    }, [])\n// console.log(games);\n\n        return (\n            <div>\n\n            <h1 className=\"titreGames\">Jeux les plus populaires</h1>\n\n                <div className=\"flexAccueil\">\n\n                    {games.map((game,index) => (\n\n                        <div key={index} className=\"carteGames\">\n\n                            <img src={game.box_art_url} alt=\"jeu profile pic\" className=\"imgCarte\"/>\n\n                            <div className=\"cardBodyGames\">\n                                <h5 className=\"titreCartesGames\">{game.name}</h5>\n\n                                <Link\n                                className=\"lien\"\n                                to={{\n                                    pathname: \"game/\" + game.name,\n                                    state: {\n                                        gameID: game.id\n                                    }\n                                }}\n                                >\n                                <div className=\"btnCarte\">Regarder {game.name}</div>\n                                </Link>\n                            </div>\n                        </div>\n\n                    ))}\n\n                </div>\n\n            </div>\n        ) \n}\n\nexport default Games;","import React, {useEffect, useState} from 'react';\nimport api from '../../api';\nimport {Link} from 'react-router-dom';\n\nfunction TopStreams(){\n\n    const [channels, setChannels] = useState([]);\n\n    useEffect(() => {\n\n        const fetchData = async () => {\n\n            const result = await api.get(\"https://api.twitch.tv/helix/streams\");\n\n            let dataArray = result.data.data;\n            console.log(dataArray);\n            \n            let gameIDs = dataArray.map(stream => {\n                return stream.game_id;\n            })\n            let userIDs = dataArray.map(stream => {\n                return stream.user_id;\n            })\n            // console.log(gameIDs, userIDs);\n            \n            // Création des URLs personnalisés\n\n            let baseUrlGames = \"https://api.twitch.tv/helix/games?\";\n            let baseUrlUsers = \"https://api.twitch.tv/helix/users?\";\n\n            let queryParamsGame = \"\";\n            let queryParamsUsers = \"\";\n\n            gameIDs.map(id => {\n                return (queryParamsGame = queryParamsGame + `id=${id}&`)\n            })\n            userIDs.map(id => {\n                return (queryParamsUsers = queryParamsUsers + `id=${id}&`)\n            })\n\n            // url final\n            let urlFinalGames = baseUrlGames + queryParamsGame;\n            let urlFinalUsers = baseUrlUsers + queryParamsUsers;\n            // console.log(urlFinalGames);\n\n            // appel\n            let gamesNames = await api.get(urlFinalGames);\n            let getUsers = await api.get(urlFinalUsers);\n\n            let gamesNameArray = gamesNames.data.data;\n            let arrayUsers = getUsers.data.data;\n            // console.log(arrayUsers, gamesNameArray);\n\n\n            // création du tableau final\n            let finalArray = dataArray.map(stream => {\n\n                stream.gameName = \"\";\n                stream.login = \"\";\n\n                gamesNameArray.forEach(name => {\n                    arrayUsers.forEach(user => {\n                        if(stream.user_id === user.id && stream.game_id === name.id) {\n                            \n                            stream.truePic = user.profile_image_url;\n                            stream.gameName = name.name;\n                            stream.login = user.login;\n                        }\n                    })\n                })\n\n                let newUrl = stream.thumbnail_url \n                .replace('{width}', \"320\")\n                .replace('{height}', \"180\");\n                stream.thumbnail_url = newUrl;\n\n                return stream;\n            })\n            \n            setChannels(finalArray);\n        }\n\n        fetchData();\n\n    }, [])\n\n    return (\n        <div>\n            <h1 className=\"titreGames\">Stream les plus populaires</h1>\n           \n            <div className=\"flexAccueil\">\n\n                {channels.map((channel, index) => (\n\n                    <div key={index} className=\"carteStream\">\n\n                        <img src={channel.thumbnail_url} className=\"imgCarte\" alt=\"jeu\"/>\n\n                        <div className=\"cardBodyStream\">\n                            \n                            <h5 className=\"titreCartesStream\">{channel.user_name}</h5>\n                            <p className=\"txtStream\">Jeu : {channel.gameName}</p>\n\n                            <p className=\"txtStream viewers\">Viewers : {channel.viewer_count}</p>\n\n                        <Link\n                        className=\"lien\"\n                        to={{\n                            pathname: `/live/${channel.login}`\n                        }}\n                        >\n                            <div className=\"btnCarte\">Regarder {channel.user_name}</div>\n                        </Link>\n\n                        </div>\n\n\n                    </div>\n\n                ))}\n\n            </div>\n        </div>\n    )\n\n}\n\n\nexport default TopStreams;","import React, {useState, useEffect} from 'react';\nimport ReactTwitchEmbedVideo from 'react-twitch-embed-video';\nimport {useParams} from 'react-router-dom';\nimport api from '../../api';\n\nfunction Live(){\n\n    let {slug} = useParams();\n    console.log(slug);\n    \n    const [infoStream, setInfoStream] = useState([]);\n    const [infoGame, setInfoGame] = useState([]);\n\n    useEffect(() => {\n\n        const fetchData = async () => {\n\n            const result = await api.get(`https://api.twitch.tv/helix/streams?user_login=${slug}`)\n            // console.log(result);\n            \n            if(result.data.data.length === 0) {\n                setInfoStream(false)\n            } else {\n\n                \n                let gameID = result.data.data.map(gameid => {\n                    return gameid.game_id;\n                })\n                \n                const resultNomGame = await api.get(`https://api.twitch.tv/helix/games?id=${gameID}`)\n                // console.log(resultNomGame);\n                \n                let nomJeu = resultNomGame.data.data.map(gameName => {\n                    return gameName.name;\n                })\n                \n                \n                setInfoGame(nomJeu)\n                setInfoStream(result.data.data[0])\n            }\n        }\n\n        fetchData();\n\n    }, [slug])\n\n\n    return (\n\n        infoStream  ?\n\n        <div className=\"containerDecale\">\n            <ReactTwitchEmbedVideo height=\"754\" width=\"100%\" channel={slug}/>\n            <div className=\"contInfo\">\n                <div className=\"titreStream\">{infoStream.title}</div>\n                <div className=\"viewer\">Viewers : {infoStream.viewer_count}</div>\n                <div className=\"infogame\">Streamer : {infoStream.user_name}, &nbsp; Langue : {infoStream.language}</div>\n                <div className=\"nomJeu\">Jeu : {infoGame}</div>\n            </div>\n        </div>\n\n        :\n\n        <div className=\"containerDecale\">\n            <ReactTwitchEmbedVideo height=\"754\" width=\"100%\" channel={slug}/>\n            <div className=\"contInfo\">\n                <div className=\"titreStream\">Le Streamer est offline ! </div>\n            </div>\n        </div>\n\n    )\n}\n\nexport default Live;","import React, {useState, useEffect} from 'react';\nimport {useLocation, useParams} from 'react-router-dom';\nimport api from '../../api';\nimport {Link} from 'react-router-dom';\n\nfunction GameStreams(){\n\n    let {slug} = useParams();\n    let location = useLocation();\n    console.log(location);\n\n    const [streamData, setStreamData] = useState([]);\n    const [viewers, setViewers] = useState(0);\n\n    useEffect(() => {\n\n        const fetchData = async () => {\n            const result = await api.get(\n                `https://api.twitch.tv/helix/streams?game_id=${location.state.gameID}`\n            );\n            let dataArray = result.data.data;\n\n            let finalArray = dataArray.map(stream => {\n                let newURL = stream.thumbnail_url\n                .replace('{width}', \"320\")\n                .replace('{height}', \"180\");\n                stream.thumbnail_url = newURL;\n                return stream;\n            })\n\n            // calcul du total des viewers\n            let totalViewers = finalArray.reduce((acc, val) => {\n                return acc + val.viewer_count;\n            }, 0);\n\n            let userIDs = dataArray.map(stream => {\n                return stream.user_id;\n            })\n\n            let baseUrl = \"https://api.twitch.tv/helix/users?\";\n            let queryParamsUsers = \"\";\n\n            userIDs.map(id => {\n                return (queryParamsUsers = queryParamsUsers + `id=${id}&`)\n            })\n            let finalUrl = baseUrl + queryParamsUsers;\n\n            let getUsersLogin = await api.get(finalUrl);\n            \n            let userLoginArray = getUsersLogin.data.data;\n\n            finalArray = dataArray.map(stream => {\n\n                stream.login = \"\";\n\n                userLoginArray.forEach(login => {\n                    if(stream.user_id === login.id) {\n                        stream.login = login.login;\n                    }\n                })\n\n                return stream;\n            })\n\n            setViewers(totalViewers);\n            setStreamData(finalArray)\n        }\n\n        fetchData();\n    }, [location.state.gameID])\n\n    console.log(viewers);\n    console.log(streamData);\n    \n    \n\nreturn (\n\n    <div>\n        \n        <h1 className=\"titreGamesStreams\">Streams : {slug}</h1>\n        <h3 className=\"sousTitreGameStreams\">\n            <strong className=\"textColored\">{viewers}</strong> personnes regardent {slug}\n        </h3>\n\n        <div className=\"flexAccueil\">\n\n            {streamData.map((stream,index) => (\n\n                <div key={index} className=\"carteGameStreams\">\n\n                    <img src={stream.thumbnail_url} alt=\"jeu carte img\" className=\"imgCarte\"/>\n\n                    <div className=\"cardBodyGameStreams\">\n\n                    <h5 className=\"titreCartesStream\">{stream.user_name}</h5>\n                    <p className=\"txtStream\">Nombre de viewers : {stream.viewer_count}</p>\n\n                    <Link\n                    className=\"lien\"\n                    to={{\n                        pathname: `/live/${stream.login}`\n                    }}\n                    >\n\n                        <div className=\"btnCarte\">Regarder {stream.user_name}</div>\n\n                    </Link>\n\n                    </div>\n\n                </div>\n\n            ))}\n\n        </div>\n    </div>\n)\n\n}\n\nexport default GameStreams;","import React from 'react';\n\n\nfunction Erreur(){\n\n\n    return(\n            <div className=\"containerDecaleResultats\">\n                <h4>Résultats de recherche: Pas de résultats, <br /> Vérifiez l'orthographe de votre saisie, ou ce streamer n'éxiste pas.</h4>\n            </div>\n    )\n}\n\nexport default Erreur;","import React, {useState, useEffect} from 'react';\nimport api from '../../api';\nimport {Link, useParams} from 'react-router-dom';\nimport Erreur from '../Erreur/Erreur';\n\nfunction Resultats(){\n\n    let {slug} = useParams();\n\n    const [result, setResult] = useState(true);\n    const [streamerInfo, setStreamerInfo] = useState([]);\n\n    let cleanSearch = slug.replace(/ /g,'');\n\n    useEffect(() => {\n\n        const fetchData = async () => {\n\n            const result = await api.get(`https://api.twitch.tv/helix/users?login=${cleanSearch}`)\n            console.log(result);\n            \n            if(result.data.data.length === 0) {\n                setResult(false);\n            } else {\n                setStreamerInfo(result.data.data)\n            }\n\n        }\n        fetchData();\n\n    }, [cleanSearch])\n\n    return (\n\n        result ? \n        \n        <div>\n           \n            <div className=\"containerDecaleResultats\">\n                <h4>Résultats de recherche : </h4>\n\n                {streamerInfo.map((stream,index) => (\n\n                    <div key={index} className=\"carteResultats\">\n                        <img src={stream.profile_image_url} alt=\"resultat profile\" className=\"imgCarte\"/>\n\n                        <div className=\"cardBodyResults\">\n                            <h5 className=\"titreCartesStream\">{stream.display_name}</h5>\n                            <div className=\"txtResult\">\n                                {stream.description}\n                            </div>\n\n                            <Link\n                            className=\"lien\"\n                            to={{\n                                pathname: `/live/${stream.login}`\n                            }}\n                            >\n                                <div className=\"btnCarte btnResult\">Regarder {stream.display_name}</div>\n                            </Link>\n                        </div>\n                    </div>\n\n                ))}\n\n            </div>\n\n        </div> \n        :\n        <Erreur />\n    )\n}\n\nexport default Resultats;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport Sidebar from './components/Sidebar/Sidebar';\nimport Games from './components/Games/Games';\nimport TopStreams from './components/TopStreams/TopStreams';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport Live from './components/Live/Live';\nimport GameStreams from './components/GameStreams/GameStreams';\nimport Resultats from './components/Resultats/Resultats'\nimport Erreur from './components/Erreur/Erreur';\n\n\nfunction App() {\n  return (\n\n    <Router\n    forceRefresh={true}\n    >\n        <div className=\"App\">\n          <Header />\n          <Sidebar />\n\n          <Switch>\n              <Route exact path=\"/\" component={Games} />\n              <Route exact path=\"/top-streams\" component={TopStreams} />\n              <Route exact path=\"/live/:slug\" component={Live} />\n              <Route exact path=\"/game/:slug\" component={GameStreams} />\n              <Route exact path=\"/resultats/:slug\" component={Resultats} />\n              <Route exact path=\"/resultats/\" component={Erreur} />\n          </Switch>\n        </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}